const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

const app = express();
const PORT = 3000;

mongoose.connect("mongodb://localhost:27017/blogDB", { useNewUrlParser: true, useUnifiedTopology: true });

const postSchema = new mongoose.Schema({
    title: String,
    content: String
});

const Post = mongoose.model("Post", postSchema);

app.set("view engine", "ejs");
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

app.get("/", async (req, res) => {
    const posts = await Post.find();
    res.render("index", { posts });
});

app.get("/add", (req, res) => {
    res.render("addPost");
});

app.post("/add", async (req, res) => {
    const newPost = new Post({
        title: req.body.title,
        content: req.body.content
    });
    await newPost.save();
    res.redirect("/");
});

app.get("/edit/:id", async (req, res) => {
    const post = await Post.findById(req.params.id);
    res.render("editPost", { post });
});

app.post("/edit/:id", async (req, res) => {
    await Post.findByIdAndUpdate(req.params.id, { title: req.body.title, content: req.body.content });
    res.redirect("/");
});

app.get("/delete/:id", async (req, res) => {
    await Post.findByIdAndDelete(req.params.id);
    res.redirect("/");
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
